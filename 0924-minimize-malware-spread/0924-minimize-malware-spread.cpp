class Solution {
public:
    unordered_set<int>st;
    int dfs(vector<vector<int>>&graph, int src, int &count, vector<int>&vis) {
        vis[src] = 1;
        if(st.count(src)) {
            count++;
        }
        int cnt = 1;
        for(int i = 0; i < graph[src].size(); ++i) {
            if(i == src) continue;
            if(graph[src][i] == 1 && !vis[i]) {
                cnt += dfs(graph, i, count, vis);
            }
        }
        return cnt;
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size(), mx = -1e9;
        vector<int> vis(n, 0);
        for(int ele : initial) {
            st.insert(ele);
        }
        sort(initial.begin(), initial.end());
        int ans = initial[0];
        for(int i = 0; i < initial.size(); ++i) {
            if(!vis[initial[i]]) {
                int count = 0;
                int res = dfs(graph, initial[i], count, vis);
                if(count == 1) {
                    if(res > mx) {
                        mx = res;
                        ans = initial[i];
                    } 
                }
            }
        }
        return ans;
    }
};